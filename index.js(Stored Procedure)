// Import necessary modules
import express from "express"; // Import Express framework
import bodyParser from "body-parser"; // Middleware to parse request bodies
import cors from "cors"; // Middleware to enable Cross-Origin Resource Sharing (CORS)
import dotenv from "dotenv"; // Module to load environment variables from .env file
import pkg from 'mssql'; // SQL Server client library
const { ConnectionPool, Request, TYPES } = pkg; // Destructure SQL Server client components

dotenv.config(); // Load environment variables from .env file

// Create Express app
const app = express();

// Middleware setup
app.use(cors()); // Enable CORS for all routes
app.use(bodyParser.urlencoded({ extended: true })); // Parse URL-encoded bodies
app.use(bodyParser.json()); // Parse JSON bodies

// Database connection configuration
const connectionConfig = {
    server: '172.16.1.66', // Database server address
    user: process.env.DB_USER, // Database user from environment variables
    password: process.env.DB_PASSWORD, // Database password from environment variables
    options: {
        TrustServerCertificate: true, // Trust the server certificate
        enableArithAbort: true, // Enable arithmetic abort
        instancename: 'default', // Only needed for default instances
        trustServerCertificate: true, // Trust the server certificate
        integratedSecurity: true, // Enables Windows Authentication
    }
};

// Create connection pool
const pool = new ConnectionPool(connectionConfig);

// Connect to the database
pool.connect((err) => {
    if (err) {
        console.error('Error connecting to database:', err);
    } else {
        console.log("Database connected successfully");
    }
});

// Define a route to welcome users and provide information about the API
app.get('/', async (req, res) => {
    const ipAddress = req.ip; // Extract IP address from request
    const welcomeMessage = `Welcome to DIGIMON Indicator API. You are accessing from IP address: ${ipAddress}`;
    res.status(200).send(welcomeMessage);
});

// Define a route to fetch all data from the database
app.get('/allData', async (req, res) => {
    try {
        const request = new Request(pool);
        request.query('SELECT * FROM [mne].[MNE].[SISAPP_CRITICAL_INDICATORS_REPORT]', async (err, result) => {
            if (err) {
                console.error("Error fetching data from database:", err);
                res.status(500).json({ message: "Error fetching data from database" });
            } else {
                const data = result.recordset; // Extracting the recordset from the result
                const rowCount = result.recordset.length; // Get the count of rows fetched
                res.status(200).json({ count: rowCount, data }); // Include count in the response
            }
        });
    } catch (error) {
        console.error("Error fetching data from database:", error);
        res.status(500).json({ message: "Error fetching data from database" });
    }
});

// Define a route to fetch data by school code
app.get('/allData/:schoolCode', async (req, res) => {
    try {
        const { schoolCode } = req.params; // Extract school code from URL parameter
        
        const request = new Request(pool);
        const query = `SELECT * FROM [mne].[MNE].[SISAPP_CRITICAL_INDICATORS_REPORT] WHERE SCHOOL_CODE = @schoolCode`;
        
        request.input('schoolCode', TYPES.NVarChar, schoolCode); // Set parameter for SQL query

        const result = await new Promise((resolve, reject) => {
            request.query(query, (err, result) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(result.recordset);
                }
            });
        });

        const rowCount = result.length; // Get the count of rows fetched
        res.status(200).json({ count: rowCount, data: result }); // Include count in the response
    } catch (error) {
        console.error("Error fetching data from database:", error);
        res.status(500).json({ message: "Error fetching data from database" });
    }
});

// Define a route to filter data by SCHOOL_CODE parameter
app.get('/filterData', async (req, res) => {
    try {
        const { SCHOOL_CODE } = req.query; // Extract SCHOOL_CODE parameter from query string
        console.log("SCHOOL_CODE:", SCHOOL_CODE); // Debugging statement

        if (!SCHOOL_CODE) {
            return res.status(400).json({ message: "SCHOOL_CODE parameter is required" });
        }
        
        const request = new Request(pool);
        const query = `SELECT * FROM [mne].[MNE].[SISAPP_CRITICAL_INDICATORS_REPORT] WHERE SCHOOL_CODE = @schoolCode`;
        
        request.input('schoolCode', TYPES.NVarChar, SCHOOL_CODE); // Set parameter for SQL query

        const result = await new Promise((resolve, reject) => {
            request.query(query, (err, result) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(result.recordset);
                }
            });
        });

        const rowCount = result.length; // Get the count of rows fetched
        res.status(200).json({ count: rowCount, data: result }); // Include count in the response
    } catch (error) {
        console.error("Error fetching data from database:", error);
        res.status(500).json({ message: "Error fetching data from database" });
    }
});

// Define a route to submit data to the database
app.post('/submitData', async (req, res) => {
    const data = req.body;

    if (!data) {
        return res.status(400).json({ message: "Data not provided" });
    }

    // Execute stored procedure
    try {
        await executeStoredProcedure(pool, data);
        console.log("Data inserted successfully");
        res.status(200).json({ message: "Data received and inserted into database successfully" });
    } catch (err) {
        console.error("Error inserting data into database:", err);
        res.status(500).json({ message: "Error inserting data into database" });
    }
});

// Function to execute a stored procedure
async function executeStoredProcedure(pool, data) {
    return new Promise((resolve, reject) => {
        const request = new Request(pool);
        // Set inputs for the stored procedure parameters...
        
        // Execute the stored procedure
        request.execute('[mne].[MNE].[DigimonIndicators]', (err) => {
            if (err) {
                reject(err);
            } else {
                resolve();
            }
        });
    });
}

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});
